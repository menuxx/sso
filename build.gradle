group 'com.yingtaohuo.sso'
version '1.0-SNAPSHOT'

buildscript {
    ext.spring_boot_version = "1.5.4.RELEASE"
    ext.kotlin_version = '1.1.4-3'

    repositories {
        mavenLocal()
        maven { url "http://nexus.daocloud.io/repository/maven-public/" }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.springframework:springloaded:1.2.6.RELEASE"
        classpath "nu.studer:gradle-jooq-plugin:2.0.7"
        classpath "mysql:mysql-connector-java:6.0.3"
        classpath "org.jooq:jooq-codegen:3.9.5"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
}

apply plugin: 'idea'
apply plugin : 'java'
apply plugin : 'kotlin'
apply plugin : 'kotlin-spring'
apply plugin : 'kotlin-noarg'
apply plugin : 'kotlin-jpa'
apply plugin : 'org.springframework.boot'
apply plugin : 'nu.studer.jooq'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

bootRun {
    addResources = true
}

noArg {
    annotation("com.yingtaohuo.NoArg")
}

allOpen {
    annotation("com.yingtaohuo.AllOpen")
}

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {

    optional "org.springframework.boot:spring-boot-configuration-processor"

    compile("org.springframework.boot:spring-boot-devtools")

    compile 'com.google.guava:guava:23.0'

    compile 'com.qiniu:qiniu-java-sdk:7.2.+'
    compile 'org.jooq:jooq:3.9.5'
    compile 'org.jooq:jooq-meta:3.9.5'
    compile "org.slf4j:slf4j-api:1.7.21"

    compile "com.zaxxer:HikariCP:2.6.3"

    compile "org.springframework.boot:spring-boot-starter-freemarker"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }


    compile "io.jsonwebtoken:jjwt:0.7.0"

    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'

    compile "mysql:mysql-connector-java:6.0.3"
    jooqRuntime 'mysql:mysql-connector-java:6.0.3'
    mybatisGenerator 'mysql:mysql-connector-java:6.0.3'

    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:1.3.5"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "junit:junit:4.12"
}

// ./gradlew generateMenuxxDevJooqSchemaSource

// 手动执行
// compileJava.dependsOn(processResources)

jooq {
    version = '3.9.5'
    edition = 'OSS'
    menuxxDev(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://rm-uf68lsw07o293t779o.mysql.rds.aliyuncs.com/menuxx?characterEncoding=UTF-8'
            user = 'qurenjiadb'
            password = '1s$kh8g!1'
        }
        generator {
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'menuxx'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'com.yingtaohuo.sso.db'
                // directory = 'src/main/java'
            }
        }
    }
    menuxxProd(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://nizhuantech.com:65321/menuxx_prd?useSSL=false&useUnicode=true&characterEncoding=UTF-8'
            user = 'root'
            password = 'FNQ31287twv'
        }
        generator {
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'menuxx_prd'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'com.yingtaohuo.sso.db'
                // directory = 'src/main/java'
            }
        }
    }
}

project.tasks.getByName('compileJava').dependsOn -= 'generateMenuxxProdJooqSchemaSource'
project.tasks.getByName('compileJava').dependsOn -= 'generateMenuxxDevJooqSchemaSource'

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: false, configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}